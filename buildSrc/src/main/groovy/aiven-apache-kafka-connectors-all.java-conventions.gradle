/*
 * Copyright 2020 Aiven Oy
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

plugins {

    // https://docs.gradle.org/current/userguide/java_library_plugin.html
    id "java-library"

    // https://docs.gradle.org/current/userguide/idea_plugin.html
    id "idea"

    // https://docs.gradle.org/current/userguide/jacoco_plugin.html
    id "jacoco"

    // https://docs.gradle.org/current/userguide/distribution_plugin.html
    id "distribution"

    // https://docs.gradle.org/current/userguide/publishing_maven.html
    id "maven-publish"

    // https://docs.gradle.org/current/userguide/signing_plugin.html
    id "signing"

    // https://plugins.gradle.org/plugin/com.diffplug.spotless
    id "com.diffplug.spotless"

    id "pmd"

    id "com.github.spotbugs"
}

java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11

    withJavadocJar()
    withSourcesJar()
}

compileJava {
    options.compilerArgs = ["-Xlint:all", "-Werror"]
}

javadoc {
    options.addBooleanOption('html5', true)
}

jacoco {
    toolVersion = "0.8.7"
}

repositories {
    mavenLocal()
    mavenCentral()
    maven {
        url "https://packages.confluent.io/maven"
   }
}

distributions {
    main {
        contents {
            from jar
            from configurations.runtimeClasspath

            into("/") {
                from projectDir
                include "version.txt", "README*", "LICENSE*", "NOTICE*", "licenses/"
                include "config/"
            }
        }
    }
}

javadoc {
    // disable missing javadoc lint and show only warning and error messages
    options.addStringOption('Xdoclint:all,-missing', '-quiet')
}

test {
    useJUnitPlatform()
}

task wrapper(type: Wrapper) {
    distributionType = 'ALL'
    doLast {
        def sha256Sum = new String(new URL("${distributionUrl}.sha256").bytes)
        propertiesFile << "distributionSha256Sum=${sha256Sum}\n"
        println "Added checksum to wrapper properties"
    }
}

pmd {
    consoleOutput = true
    toolVersion = "6.55.0"
    rulesMinimumPriority = 5
}
pmdMain {
    ruleSetFiles = files("${project.rootDir}/gradle-config/aiven-pmd-ruleset.xml")
    ruleSets = [] // Clear the default rulesets
}
pmdTest {
    ruleSetFiles = files("${project.rootDir}/gradle-config/aiven-pmd-test-ruleset.xml")
    ruleSets = [] // Clear the default rulesets
}

spotbugs {
    toolVersion = "4.7.3"
    excludeFilter = file("${project.rootDir}/gradle-config/spotbugs-exclude.xml")
}
spotbugsMain {
    reports {
        html {
            stylesheet = 'fancy-hist.xsl'
        }
    }
}
spotbugsTest {
    reports {
        html {
            stylesheet = 'fancy-hist.xsl'
        }
    }
}

spotless {
    format 'misc', {
        // define the files to apply `misc` to
        target '*.gradle', '*.md', '.gitignore'
        targetExclude ".*/**", "**/build/**", "**/.gradle/**"

        // define the steps to apply to those files
        trimTrailingWhitespace()
        indentWithSpaces()
        endWithNewline()
    }

    java {
        licenseHeaderFile file("${project.rootDir}/gradle-config/java.header")
        importOrder("javax", "java", "org.apache.kafka", "io.aiven", "")
        removeUnusedImports()
        replaceRegex("No wildcard imports.", "import(?:\\s+static)?\\s+[^\\*\\s]+\\*;(\r\n|\r|\n)", '$1')
        eclipse().configFile("${project.rootDir}/gradle-config/aiven-eclipse-formatter.xml")
        indentWithSpaces()
        endWithNewline()
        trimTrailingWhitespace()
    }
}
