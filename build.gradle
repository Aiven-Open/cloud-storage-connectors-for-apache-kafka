/*
 * Copyright 2020 Aiven Oy
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

plugins {

    // https://docs.gradle.org/current/userguide/java_library_plugin.html
    id "java-library"

    // https://docs.gradle.org/current/userguide/checkstyle_plugin.html
    id "checkstyle"

    // https://docs.gradle.org/current/userguide/jacoco_plugin.html
    id "jacoco"

    // https://docs.gradle.org/current/userguide/distribution_plugin.html
    id "distribution"

    // https://docs.gradle.org/current/userguide/publishing_maven.html
    id "maven-publish"

    // https://docs.gradle.org/current/userguide/signing_plugin.html
    id "signing"
}

group = "io.aiven"

java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11

    withJavadocJar()
    withSourcesJar()
}

compileJava {
    options.compilerArgs = ["-Xlint:all", "-Werror"]
}

javadoc {
    options.addBooleanOption('html5', true)
}

wrapper {
    distributionType = 'ALL'
    doLast {
        final URI sha256Uri = new URI(wrapper.getDistributionUrl() + ".sha256")
        final String sha256Sum = new String(sha256Uri.toURL().bytes)
        wrapper.getPropertiesFile() << "distributionSha256Sum=${sha256Sum}\n"
        println "Added checksum to wrapper properties"
    }
}

checkstyle {
    toolVersion "9.2.1"
    getConfigDirectory().set(rootProject.file("checkstyle/"))
}

jacoco {
    toolVersion = "0.8.7"
}

repositories {
    mavenLocal()
    mavenCentral()
    maven {
        url "https://packages.confluent.io/maven"
   }

}

ext {
    kafkaVersion = "1.1.0"
    parquetVersion = "1.11.2"
    junitVersion = "5.10.0"
    confluentPlatformVersion = "7.2.2"
    hadoopVersion = "3.3.6"
}

distributions {
    main {
        contents {
            from jar
            from configurations.runtimeClasspath

            into("/") {
                from projectDir
                include "version.txt", "README*", "LICENSE*", "NOTICE*", "licenses/"
                include "config/"
            }
        }
    }
}

dependencies {
    compileOnly "org.apache.kafka:connect-api:$kafkaVersion"
    compileOnly "org.apache.kafka:connect-runtime:$kafkaVersion"
    compileOnly "org.apache.kafka:connect-json:$kafkaVersion"

    implementation("io.confluent:kafka-connect-avro-data:$confluentPlatformVersion") {
        exclude group: "org.apache.kafka", module: "kafka-clients"
    }

    implementation "org.xerial.snappy:snappy-java:1.1.10.4"
    implementation "com.github.luben:zstd-jni:1.5.5-5"

    implementation "org.slf4j:slf4j-api:1.7.36"

    implementation "org.apache.commons:commons-text:1.10.0"

    implementation( "org.apache.parquet:parquet-avro:$parquetVersion") {
        exclude group: "org.xerial.snappy", module: "snappy-java"
        exclude group: "org.slf4j", module: "slf4j-api"
        exclude group: "org.apache.avro", module: "avro"
    }
    implementation( "org.apache.hadoop:hadoop-common:$hadoopVersion") {
        exclude group: "org.apache.hadoop.thirdparty", module: "hadoop-shaded-protobuf_3_7"
        exclude group: "com.google.guava", module: "guava"
        exclude group: "commons-cli", module: "commons-cli"
        exclude group: "org.apache.commons", module: "commons-math3"
        exclude group: "org.apache.httpcomponents", module: "httpclient"
        exclude group: "commons-codec", module: "commons-codec"
        exclude group: "commons-io", module: "commons-io"
        exclude group: "commons-net", module: "commons-net"
        exclude group: "org.eclipse.jetty"
        exclude group: "org.eclipse.jetty.websocket"
        exclude group: "javax.servlet"
        exclude group: "javax.servlet.jsp"
        exclude group: "javax.activation"
        exclude group: "com.sun.jersey"
        exclude group: "log4j"
        exclude group: "org.apache.commons", module: "commons-text"
        exclude group: "org.slf4j", module: "slf4j-api"
        exclude group: "org.apache.hadoop", module: "hadoop-auth"
        exclude group: "org.apache.hadoop", module: "hadoop-yarn-api"
        exclude group: "com.google.re2j"
        exclude group: "com.google.protobuf"
        exclude group: "com.google.code.gson"
        exclude group: "com.jcraft"
        exclude group: "org.apache.curator"
        exclude group: "org.apache.zookeeper"
        exclude group: "org.apache.htrace"
        exclude group: "com.google.code.findbugs"
        exclude group: "org.apache.kerby"
        exclude group: "com.fasterxml.jackson.core"
        exclude group: "com.fasterxml.woodstox", module: "woodstox-core:5.0.3"
        exclude group: "org.apache.avro", module: "avro"
        exclude group: "org.apache.hadoop", module: "hadoop-yarn-common"
        exclude group: "com.google.inject.extensions", module: "guice-servlet"
        exclude group: "io.netty", module: "netty"
    }

    testImplementation "org.apache.kafka:connect-api:$kafkaVersion"
    testImplementation "org.apache.kafka:connect-runtime:$kafkaVersion"
    testImplementation "org.apache.kafka:connect-json:$kafkaVersion"
    testImplementation "org.junit.jupiter:junit-jupiter:$junitVersion"
    testImplementation "org.apache.parquet:parquet-tools:$parquetVersion"
    testImplementation "com.fasterxml.jackson.core:jackson-databind:2.15.2"
    testImplementation "org.mockito:mockito-core:5.5.0"
    testImplementation 'org.assertj:assertj-core:3.24.2'

    testImplementation ("org.apache.parquet:parquet-tools:$parquetVersion") {
        exclude group: "org.slf4j", module: "slf4j-api"
    }
    testImplementation "org.codehaus.woodstox:stax2-api:4.2.1"
    testImplementation "org.apache.hadoop:hadoop-mapreduce-client-core:$hadoopVersion"

    testImplementation "com.fasterxml.jackson.core:jackson-databind:2.15.2"
    testImplementation "io.confluent:kafka-connect-avro-converter:$confluentPlatformVersion"

    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junitVersion"
}

test {
    useJUnitPlatform()
}

javadoc {
    // disable missing javadoc lint and show only warning and error messages
    options.addStringOption('Xdoclint:all,-missing', '-quiet')
}

publishing {
    publications {
        maven(MavenPublication) {
            groupId = getGroup()
            artifactId = "commons-for-apache-kafka-connect"
            version = getVersion()

            from components.java

            pom {
                name = "Avien's Common Module for Apache Kafka connectors"
                description = "Avien's Common Module for Apache Kafka connectors"
                url = "https://github.com/aiven/commons-for-apache-kafka-connect"
                organization {
                    name = "Aiven Oy"
                    url = "https://aiven.io"
                }

                licenses {
                    license {
                        name = "Apache 2.0"
                        url = "http://www.apache.org/licenses/LICENSE-2.0"
                        distribution = "repo"
                    }
                }

                developers {
                    developer {
                        id = 'aiven'
                        name = 'Aiven Opensource'
                        email = 'opensource@aiven.io'
                    }
                }

                scm {
                    connection = 'scm:git:git://github.com:aiven/commons-for-apache-kafka-connect.git'
                    developerConnection = 'scm:git:ssh://github.com:aiven/commons-for-apache-kafka-connect.git'
                    url = 'https://github.com/aiven/commons-for-apache-kafka-connect'
                }
            }
        }
    }

    repositories {
        maven {
            name="sonatype"

            def releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2"
            def snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots"
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl

            credentials(PasswordCredentials)
        }
    }
}

signing {
    sign publishing.publications.maven
    def signingKey = findProperty("signingKey")
    def signingPassword = findProperty("signingPassword")
    useInMemoryPgpKeys(signingKey, signingPassword)
}
